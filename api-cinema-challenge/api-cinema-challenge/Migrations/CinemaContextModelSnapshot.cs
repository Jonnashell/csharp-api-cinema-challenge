// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jonnabr@hotmail.com",
                            Name = "Jonatan",
                            Phone = "+4793277670",
                            UpdatedAt = new DateTime(2025, 1, 21, 15, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "Isabel@hotmail.com",
                            Name = "Isabel",
                            Phone = "+4792088620",
                            UpdatedAt = new DateTime(2025, 1, 21, 15, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 19, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "marius@hotmail.com",
                            Name = "Marius",
                            Phone = "+4798765432",
                            UpdatedAt = new DateTime(2025, 1, 21, 17, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "emma@hotmail.com",
                            Name = "Emma",
                            Phone = "+4791234567",
                            UpdatedAt = new DateTime(2025, 1, 21, 18, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 11, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A skilled thief is offered a chance to have his past crimes forgiven.",
                            Rating = "PG-13",
                            RuntimeMins = 148,
                            Title = "Inception",
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 9, 14, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A computer hacker learns about the true nature of reality.",
                            Rating = "R",
                            RuntimeMins = 136,
                            Title = "The Matrix",
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 13, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Explorers travel through a wormhole in space.",
                            Rating = "PG-13",
                            RuntimeMins = 169,
                            Title = "Interstellar",
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 6, 16, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Batman faces the Joker in Gotham City.",
                            Rating = "PG-13",
                            RuntimeMins = 152,
                            Title = "The Dark Knight",
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            CreatedAt = new DateTime(2025, 1, 20, 11, 0, 0, 0, DateTimeKind.Utc),
                            MovieId = 1,
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2025, 1, 23, 18, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 80,
                            CreatedAt = new DateTime(2025, 1, 19, 11, 0, 0, 0, DateTimeKind.Utc),
                            MovieId = 2,
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2025, 1, 24, 20, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 20, 13, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 1,
                            NumSeats = 2,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 2,
                            NumSeats = 1,
                            ScreeningId = 1,
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 19, 15, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 3,
                            NumSeats = 3,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 19, 16, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 4,
                            NumSeats = 2,
                            ScreeningId = 2,
                            UpdatedAt = new DateTime(2025, 1, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_cinema_challenge.Models.Screening", "Screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });
#pragma warning restore 612, 618
        }
    }
}
